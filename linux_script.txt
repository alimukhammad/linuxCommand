
create file
	cat>{filename}
		append cat>> {filename}
	touch{filename} (create empty file) 
		touch "filename" {1..100} (create multiple files at same time)

vi editor - make directories
	mkdir {directory name}
	mkdir -p "directory name"{1..3}
	touch /dir/dir/dir/{filename}{1..10}

copy a file
	cp -rvf <source> <destination>   (r-recursive v-verbal f-force)
	ex: mv dir1 dir2
	ex: mv dir1/file* dir2   (select all file in dir1 starting with file 
	
move a file
	mv <old dir> <new dir> (you need to be inside the old dir)

rename a directory/file
	mv <oldname> <newname>

remove be careful
	rm -rf * (r recursive & f force)

go back
	cd ..

make a directory
	mkdir <directory name>
	mkdir -p <dir1 dir2 dir3...> (make multiple dir using -p and dir names)

remove directory
	rmdir <directory name>
	rmdir -rf dir2  (to remove the direcory with files inside)


write the info verticaly long list type
	ls -l  (drops the horizontal print to vertical)
	ls -lr (reverses the info )
	ls -lt (shows the list in loged time)
	ls -lrt (shows the list in loged time but reversed)
	ls -lrat (long list reverst almost all except hidden files)
	ls -lart (long list reverst all including hidden files)

hidden file
	touch .file11 (dot in the front makes hidden)
	

-rw-r--r--. 1root root    3Feb 10 1756 file1

- file
d directory
b block
c character file
s socket
l soft link

r,w,x (read write execute)
rw-r--r-- > file permissions 

1/2 > number of hard link 

root > owner of the file
root > Group of the file

3 > Size of the file

3 Feb 10 17:56 > time of the file creation 

root > owner of the file 

new partition:-----

fdisk /dev/partition parent

	n
	p or e (primary or entended)
	4 (since 3 partitions are already created)
	.. recording

Partitions/Disk 
	> Physical Volume
		> Volume Group 
			> Logical Volume

lsblk
Create/Delete a partiotion
	fdisk /dev/nvme0n1
		n (new partition) d(deleting partition)
			...Last selection add storage size +5G 

Make the changes in the kernel Level use this comman
	kpartx -f /dev/nvme0n1



Extended partition can not be mounted bcuz it's 1K 

create tar ball
	tar -cvzf <file/dir name>
		(c=create)(v=verbos)(z=zip)(f=force)
Extract tar ball
	tar -xvzf <file/dir name>
		(x=extract)

pvcreate
lvcreate 

inside the partittion before same 
	add LVM by running "l" => 8e Linux LVM
	kpartx -f /dev/nvme0n1
	pvcreate /dev/nvme0n1p4
	vgcreate volume_group /dev/nvme0n1p4




Partition
fdisk /dev/<HDD name>
n---> new
p---> primary partiton
size----> +nG ( n can be your desired number in Gigs, according to size of your HDD )
t----> type of partition
which partition: 4
L: list the hex codes
LVM: 8e
Then
Linux changes to Linux LVM
w: write changes to the disk
kpartx -f------> update partition table at kernel level
pvcreate------> Physical volume creation--------> pvcreate /dev/nvme0n1p4( because you chose partition 4)
vgcreate------> volume group creation-----> vgcreate <vgname> <partition>
lvcreate-----> logical volume creation----> lvcreate -L <size +nG> <vgname>

lvextend
lvreduce
lvremove
mkfs.xfs -f /dev/<vgname>/<lvname>----> put file system type on to your disk

then mounting:

temporary/permanent

mount <lvpath> <mp path>

/etc/fstab



create an LV try extending and redusing it 



Put a file system (.xtf/exp3/exp4/exp5)
	mkfs.xfs -f /dev/nvme0n1p4 (mkfs=make_file_system)

-Temporary mounting 
	mount /dev/sda mpa
	Mount a partition
		mount <disk path> <mountpoint path>
		mount /dev/voleme_group/lvol0 mp (mp is a created dir)
		Check if mount is succesfull 
			mount|grep -w "/dev/nvme0n1p4"

-Permamanent mounting
	edit a file called /etc/fstab
	vi /etc/fstab (for security keep a copy of fstab, ex:cp /etc/fstab <copy path)
	add label/UUID> path> file type> default> ts> 0 0 
	mount <disk path> <mountpoint path>
	mount /dev/nvme0n1p4 /root/Desktop/mp
	mount|grep -w "/dev/nvme0n1p4"	
	-remove permanant mounting
		go into /etc/fstab & remove the entries 
		use "umount" to unmount 

Mounting Check
	df -h
	lsblk
	mount|grep -w "<diskname>"
	mount -l|grep -w "<diskname>"
	cat /proc/self/mounts|grep -w "<diskname>"
	cat /proc/mounts|grep -w "<diskname>"

mp = mount point
mount /dev/nvme0n1p4 mp

init 6 (restart)


Mounting creation steps below
you always have to give whole path after each command all commands below

Fdisk = create partition fdisk /dev/devicename
n = new partition
p = primary partition
size = +2G you can give size according to HDS
t = type of partition or where you wanna mount
L = list the HEX code
8e = mount thanks Linux change to LVM
w = is used to save
kpartx -f =update partition table at kernel level
pvcreate = Physical volume creation

vgcreate  = volume group creation & you also have to give vg a name anything you want

lvcreate - L = logical volume creation full command is lvcreate -L +2G name of VG

lvextend = is used to extend logical volume

mkfs.xfs -f  = is to put file system in lvm

mount = mount the logical volume full command is mount /dev/vg name / lvol0 mp

mount | grep -w “lvol0” = is used to mount

unmount = used to unmount the logical V full command is unmount /dev/vg name / lvol0 mp

lvremove = is used to remove logical volume
vgremove  = is used to removed volume group
pvremove =isused to removed physical volume


            How to delete partation below

fdisk  /dev/nvme0n1 device name
d = delete partition
kpartx -f =update partition table at kernel level full path is kpartx -f /dev/devicename


...

Partition formation
	Note: changing type 8e
	pvcreate
	vgcreate
	lvcreate: +1G
	lvresize -L +2G /dev/<vg name>/<lv name>
	mounting
	mount| grep -w "<lvname>----> checking mounted or not
	xfs_growfs-----> this is to grow your file system type across the extended lvol
	This will do the + part or the extend part by using lvresize command

	Now comes - part, which is reduce by using lvresize command:

	umount /dev/<vgname>/<lv name>
	check unmounting using mount|grep -w "<lvname>"
	[
	Note: Before reducing the size it is always recommended to take the data backup if any!
	You can use tar utility for making a tar ball and copy it to a safe location for data retrieval

	tar -cvzf 
	cp xyz.tar /root
	paste xyz.tar inside mount point
	unzip by using tar -xvzf command
	once it is done your data will be ready to use again
	]

	The above is if you have any data in the disk

	Then,

	lvreduce -L -nG /dev/<vgname>/<lvname>

	mkfs.xfs /dev/<vgname>/<lvname>

	mount it back
	check mounting
--------------------------------------------------
HW
One scenario where you have enough space in VG

vg=5GB

you have made 1G lvol extended it to 3G(1+2G) and then reduced it back to 1GB(3-2G)

What if you have to extend your lvol from 4G to 7G?

This is your assignment!
---------------------------------------------------

vgextend----> to extend space in VG

vgextend <vgname> <pvname>

lvconvert----> so there are two ways of migrating the logical volume from one disk to another

what we are doing here is we are migrating the lvol0 which is made on the pv--> /dev/nvme0n1p4 to /dev/nvme0n2p1

/dev/nvme0n1p4
lvol0-----> /dev/nvme0n1p4

lvconvert -m 1 /dev/test_vg/lvol0 /dev/nvme0n2p1

lvol0(mirror)-----> /dev/nvme0n2p1 (new pv)

pvmove:

pvmove -n /dev/test_vg/lvol0 /dev/nvme0n2p1(current pv name with lv) /dev/nvme0n1p4 (desired pv to migrate lv)


---------------------------------------

lvsnapshot:

lvcreate -L +1G -s -n <snap name> /dev/<vgname>/<lvname>

umount source lv

lvconvert --merge /dev/<vgname>/<snap name>


-----------------------------------------------

sudo

So, if you want a regular user to use super user commands instead of giving him full access 
to utilize the commands you will assign the needed commands to the regular user via sudoers file

sudo---> super user do!

sudoers file----> /etc/sudoers should be edited to give access of desired super user commands to
a regular user

vi /etc/sudoers

You may mess it up with wrong configurations and you will not warned about them

thats why we use an utility called visudo to edit /etc/sudoers file


visudo
	(why use visudo instead of vi/etc/sudoers)
	bcuz /etc/sudoers is a 
	use visudo only for sudoers file edits 

why not vi /etc/sudoers and why visudo?

because /etc/sudoers is a syntactical file and any errors made will affect the server.
If we edit it by using vi /etc/sudoers we will not be warned if there are any wrong configurations
but visudo gives us the warnings of misconfiguration!

So, its visudo always not vi /etc/sudoers


se nu 
	to show numbers.

which	
	to find the path name 

userdel <userName>
	it deletes a user 

useradd <userName>
	it addes new user 

exit 	
	exits from current user

groupadd <groupName>
	create group
		sudo usermod -G <groupName>
..
Aliases:

------------------------------------
User and Group Management

The main difference between useradd and adduser is useradd provides the directory structure for a user according to a file called /etc/skel but adduser on the other hand will only add the user. It will not add any directories.. So, useradd is always considered a better option when you are adding users to your server.



--------------------------------

yum-----> yellow dog update manager

installation syntax:

yum install <package name*>
yum status <package name*>
yum update <package name*>
yum upgrade <package name*>

Yum upgrade and yum update differences:

Yum update will update the package and delete the obselete packages
yum upgrade will update the package but it will not delete the obselete packages

So, when ever you update the kernel version you will use yum upgrade command instead of yum update

---------------------------------

what is the difference between rpm and yum?

rpm can't do the dependency resolution on its own
yum can do the dependency resultion

-------------

>>> AWS

can you update changes made to a particular server?

systemctl restart <service name>
------------------------------------------------------
can you update changes made to a particular server?

systemctl restart <service name>

yum clean all------------> clean the repos
yum update all-----------> update the repositories
-------------------------------------------------------

putty is a terminal or a client that connects to your server(aws instance)

yum-----> utility------> that helps you install something on RHEL

what does yum install?

just like .exe/.msi on windows we have .rpm packages that when installed will make softwares run to install them
we have 3 utilities rpm, yum and dnf

we are using yum to install a software by installation from .rpm packages


what is .rpm?

redhat package manager, this is the file from whcih installation happen!
-----------------------------------------------------

yum install http* -y

installed

systemctl start httpd.service
systemctl stop httpd.service
systemctl restart httpd.service
systemctl status httpd.service

------------------------------------------------------------


SSH:Prerequisites:2 virtual machinesVM1: 
nmtui---> activate connection--> okVM2: 								<nmtui>(network connection)
nmtui---> activate connection--> okVM1: 
check ip address and keep an eye (128) ip address|grep ens160(just check) 
nmcli connection showVM2: check the ip address and keep an eye (129) 
ip address|grep ens160
nmcli connection show
Then you will go to VM1
ssh-keygen   enterenterenter
Key pair will be formedcd /root/.sshid_rsa----> private keyid_rsa.pub---> 
public keypwd/root/.ssh
ssh-copy-id id_rsa.pub 
root@<VM2 IP address>ssh <VM2 IP address>
ip addresspwd/roottouch file{1..10}
shift from vm1 to vm2
and check if the 10 files are formed inside /root of vm2


nmtui
ip address |grep ens160
ssh-keygen

------------------------------------------------------------
vi editor:

linux-----> settings changes, process changes...------> text file editing


editors------> nano, vi, vim


vi----> editor

visual text editor


vi <file name/path name>

/etc/passwd-----> user info

1. insert mode
2. command mode
3. extended command mode/column mode


insert mode: edit

i- insert at the cursor position
shift+I- insert at the start of the line
shift+A- insert at the end of the line
esc- to come out of insert mode
o- to insert in a fresh line below cursor position
shift+O- to insert in a fresh line above the cursor position

Command mode: 

gg- page up(cursor goes to top of the page)
G-  page down(cursor goes to end of the page)
w- go forward word by word
nw- go forward n words
b- go back word by word
nb- go back n words
note: n can be any number
yy- to yank the line at cursor position
nyy- yank n lines
p- paste the yanked lines at the cursor position
u- undo the last change
ctrl+R- redo
dd- delete the line at cursor position
ndd- to delete n lines from cursor position
/<keyword>- you can search for the keyword


Extended command mode:
Extended command mode is also called as column mode because it starts with column

w: write
q: quit without saving
wq: save and quit
x: save and quit
se nu: line numbering
se nonu: remove line numbering
<line number>: cursor goes to that line number

Note: if you want to save or quit or save and quit forcefully then you have to add a ! symbol at the end of w or q oe wq or x
SE linux:

Security Enhanced Linux

1. Mandatory Access Control
2. Discretionary access control

Discretional access control:

file permissions
special permissions

root or the owners of the files

Mandatory access control----> system level access control mechanism

So, everything in linux

may be user
may be process
may be file
may be directory

SE LINUX LABEL

